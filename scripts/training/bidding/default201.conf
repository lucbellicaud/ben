[models]
# Model version 1 drops state for bidding, and introduce different system for NS and EW
# Model version 2 includes 4 bids when making the lookup
model_version = 2
# Version of tensorflow to use
tf_version = 1
# NS is SAYC and EW is WBridge5 with SAYC
NS = 1
EW = 99
# If using BBA the following NS and EW must match BBA's systems (0 =2/1, 1=SAYC, 2=WJ, 3=PC, 4=Acol)
use_bba = False
# Use SAYC in BBA
bba_ns = 1
bba_ew = 1

[bidding]
bidder = E:/Bridge/training/model/21GF/NS1EW99-bidding-V2-206000
info = E:/Bridge/training/model/21GF/NS1EW99-binfo-V2-206000
# If there are multiple bids over this threshold make a simulation for the bids
search_threshold = -1
# If there is bid above this threshold, make that bid ignoring other bids
no_search_threshold = 0.999

[lead]
lead_suit = D:/github/ben/UCBC 2024/Models/jack/jack_lead_suit-154000
lead_nt = D:/github/ben/UCBC 2024/Models/jack/jack_lead_nt-59000
# Ignore cards as opening lead below this value from the neural network
lead_threshold = 0.20
# Lead this card suggested by neural network if prediction is over this value
lead_accept_nn = 0.999
# Use double dummy statistics when evaluating the opening lead - default is single dummy
double_dummy = True
# Force a minimum number of leads to consider - overrides lead_threshold
min_opening_leads = 3

[eval]
lead_single_dummy = D:/github/ben/UCBC 2024/Models/jack/lr3-1000000
no_lead_single_dummy = D:/github/ben/UCBC 2024/Models/single_dummy-32768000
# Include opening lead, when making single dummy estimates
lead_included = False
# Use double dummy when estimating tricks during bidding - to slow if 200 samples
double_dummy_eval = False

[cardplay]
# This is telling if opening lead is included in the neural net for lefty
opening_lead_included = False
lefty_nt = D:/github/ben/UCBC 2024/Models/jack/lefty-1000000
lefty_suit = D:/github/ben/UCBC 2024/Models/jack/lefty-1000000
dummy_nt = D:/github/ben/UCBC 2024/Models/jack/dummy-920000
dummy_suit = D:/github/ben/UCBC 2024/Models/jack/dummy-920000
righty_nt = D:/github/ben/UCBC 2024/Models/jack/righty-1000000
righty_suit = D:/github/ben/UCBC 2024/Models/jack/righty-1000000
decl_nt = D:/github/ben/UCBC 2024/Models/jack/decl-1000000
decl_suit = D:/github/ben/UCBC 2024/Models/jack/decl-1000000
# Number of samples when playing the hand
sample_hands_play = 200
# Minimum number of boards we want returned for sampling
min_sample_hands_play = 20
# Number of samples we will generate to find sample_hands_play
sample_boards_for_play = 1000
# Should possible claim be calculated
claim = False

[pimc]
# Are we using PIMC as declarer? 
pimc_use = True
# Max wait time for results from PIMC in seconds
pimc_wait = 3
# When should PIMC kick in
pimc_start_trick = 1
# Extract hcp from samples and use as input to PIMC
pimc_constraints = True
# Stop evaluation with 1000 samples but pimc_wait takes precedence
pim_max_playouts = 1000

[sampling]
# Filter to remove hands, where the opening lead was not suggested by the neural network
lead_accept_threshold = 0.01
# Filter to remove hands, where we do not trust the bidding
bidding_threshold_sampling = 0.25
# Filter to remove hands, where the play is inconsistent with the sample
play_accept_threshold = 0.03
# Filter to remove hands not consistent with the bidding
bid_accept_play_threshold = 0.05
# Number hands where we will calculate scores for when bidding
sample_hands_auction = 128
# The number of hands we will generate to find sample_hands_auction
sample_boards_for_auction = 5000
# Minimum number of hands when caclulating scores in the bidding
min_sample_hands_auction = 10
# How many boards should we sample to find the number of samples below
sample_boards_for_auction_opening_lead = 50000
# Number of samples made, when finding the opening lead
sample_hands_opening_lead = 500
