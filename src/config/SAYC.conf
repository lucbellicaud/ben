[models]
name = SAYC

# Model version 1 drops state for bidding, and introduce different system for NS and EW
# Model version 2 includes 4 bids when making the lookup
model_version = 0
# Version of tensorflow to use
tf_version = 1

[bidding]
bidder = models/archive/sayc/bidding-1494000
info = models/archive/21gf_info/binfo_21gf-500000
# If there are multiple bids over this threshold make a simulation for the bids
search_threshold = 0.07
# If there is bid above this threshold, make that bid ignoring other bids
no_search_threshold = 0.999
# Evaluate 2 bids if auction longer than this
eval_after_bid_count = 12
# Use bidding quality in evaluation (if not good just use neaural network)
use_biddingquality = False
# Upvote the samples that matches the bidding best
use_probability = False

[lead]
# Neural network for suggesting opening lead
lead_suit = models/lead_model_b/lead-1000000
lead_nt = models/lead_model_b/lead-1000000
# Ignore cards as opening lead below this value from the neural network
lead_threshold = 0.20
# Lead this card suggested by neural network if prediction is over this value
lead_accept_nn = 0.999
# Use double dummy statistics when evaluating the opening lead - default is single dummy
double_dummy = False
# Force a minimum number of leads to consider - overrides lead_threshold
min_opening_leads = 1

[eval]
# Model for finding single dummy estimates provided an opening lead
lead_single_dummy = models/lr3_model/lr3-1000000
# Model for finding single dummy estimates without opening lead
no_lead_single_dummy = UCBC 2024/Models/single_dummy-32768000
# Include opening lead, when making single dummy estimates
lead_included = True
# Use double dummy when estimating tricks during bidding - to slow if 200 samples
double_dummy_eval = False

[cardplay]
# This is telling if opening lead is included in the neural net for lefty
opening_lead_included = False
lefty_nt = models/lefty_model/lefty-1000000
dummy_nt = models/dummy_model/dummy-920000
righty_nt = models/righty_model/righty-1000000
decl_nt = models/decl_model/decl-1000000
lefty_suit = models/lefty_model/lefty-1000000
dummy_suit = models/dummy_model/dummy-920000
righty_suit = models/righty_model/righty-1000000
decl_suit = models/decl_model/decl-1000000
# Number of samples when playing the hand
sample_hands_play = 200
# Minimum number of boards we want returned for sampling
min_sample_hands_play = 20
# Number of samples we will generate to find sample_hands_play
sample_boards_for_play = 100
# Should possible claim be calculated
claim = True
# Use bidding info during play
use_biddinginfo = True
# Use bidding quality in evaluation, if bad samples, just use neural network
use_biddingquality_in_eval = False

[pimc]
# Are we using PIMC as declarer? 
pimc_use = False
# Max wait time for results from PIMC in seconds
pimc_wait = 1
# When should PIMC kick in
pimc_start_trick = 1
# Extract hcp from samples and use as input to PIMC
pimc_constraints = True
# Stop evaluation with 1000 samples but pimc_wait takes precedence
pim_max_playouts = 1000

[sampling]
# Filter to remove hands, where the opening lead was not suggested by the neural network
# Can be disabled by setting it to zero
lead_accept_threshold = 0.01
# Filter to remove hands, where we do not trust the bidding. Used when sampling hands during bidding
use_distance = False
bidding_threshold_sampling = 0.25
# Filter to remove hands not consistent with the bidding. Used during play
bid_accept_play_threshold = 0.20
# This is calculate using euclidian distance, so 0.33 could be one of the 3 bids in a bidding round matching
#use_distance = True
#bidding_threshold_sampling = 0.70
# Filter to remove hands not consistent with the bidding. Used during play
# bid_accept_play_threshold = 0.40

# Filter to remove hands, where the play is inconsistent with the sample
play_accept_threshold = 0.03
# If we dont find enough samples, then include down to this threshold. Used during play
bid_extend_play_threshold = 0.01
# Number hands where we will calculate scores for when bidding
sample_hands_auction = 200
# The number of hands we will generate to find sample_hands_auction
sample_boards_for_auction = 5000
# Minimum number of hands when caclulating scores in the bidding
min_sample_hands_auction = 10
# If we dont find enough samples, then include down to this threshold. Used during bidding
bid_extend_bid_threshold = 0.01
# How many boards should we sample to find the number of samples below
sample_boards_for_auction_opening_lead = 5000
# Number of samples made, when finding the opening lead
sample_hands_opening_lead = 100
# Max number of samples to include when reviewing a board
sample_hands_for_review = 20
